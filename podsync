#!/bin/bash

#######################################
# Pod File Sync Tool
#
# Syncs local files to their corresponding locations on a RunPod instance.
# Uses .podsync config file for configuration:
#   SYNC_POD_ID - Target pod ID
#   SYNC_FILES - Colon-separated list of local files to sync
#   SYNC_SSH_KEY - SSH key path (optional, defaults to ~/.ssh/id_ed25519)
#   SYNC_REMOTE_PATH - Remote base path (configurable)
#######################################

set -e

# Default values
DEFAULT_SSH_KEY="~/.ssh/id_ed25519"
DEFAULT_REMOTE_PATH="/workspace"
CONFIG_FILE=".podsync"

#######################################
# File comparison helpers
#######################################
get_local_hash() {
    local file="$1"
    if [[ -f "$file" ]]; then
        md5sum "$file" 2>/dev/null | cut -d' ' -f1 || md5 -q "$file" 2>/dev/null
    fi
}

get_remote_hash() {
    local remote_path="$1"
    local ssh_port="$2"
    local ssh_key="$3"
    local ssh_host="$4"
    
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -p "$ssh_port" -i "$ssh_key" "$ssh_host" \
        "if [[ -f '$remote_path' ]]; then md5sum '$remote_path' 2>/dev/null | cut -d' ' -f1 || md5 -q '$remote_path' 2>/dev/null; fi" 2>/dev/null
}

get_all_remote_hashes() {
    local ssh_port="$1"
    local ssh_key="$2"
    local ssh_host="$3"
    local remote_base_path="$4"
    shift 4
    local files=("$@")
    
    if [[ ${#files[@]} -eq 0 ]]; then
        return 0
    fi
    
    # Build a single command to hash all files
    local hash_commands=()
    for file in "${files[@]}"; do
        local remote_path="$remote_base_path/$file"
        hash_commands+=("if [[ -f '$remote_path' ]]; then echo \"$file:\$(md5sum '$remote_path' 2>/dev/null | cut -d' ' -f1 || md5 -q '$remote_path' 2>/dev/null)\"; fi")
    done
    
    # Join commands with semicolons and execute in single SSH call
    local combined_command=$(IFS='; '; echo "${hash_commands[*]}")
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -p "$ssh_port" -i "$ssh_key" "$ssh_host" "$combined_command" 2>/dev/null
}

files_differ() {
    local local_file="$1"
    local remote_path="$2"
    local ssh_port="$3"
    local ssh_key="$4"
    local ssh_host="$5"
    
    local local_hash=$(get_local_hash "$local_file")
    local remote_hash=$(get_remote_hash "$remote_path" "$ssh_port" "$ssh_key" "$ssh_host")
    
    # If we can't get either hash, assume they differ (sync to be safe)
    if [[ -z "$local_hash" || -z "$remote_hash" ]]; then
        return 0  # files differ
    fi
    
    [[ "$local_hash" != "$remote_hash" ]]
}

batch_files_differ() {
    local ssh_port="$1"
    local ssh_key="$2"
    local ssh_host="$3"
    local remote_base_path="$4"
    shift 4
    local files=("$@")
    
    if [[ ${#files[@]} -eq 0 ]]; then
        return 0
    fi
    
    # Get all remote hashes in a single call
    local remote_output=$(get_all_remote_hashes "$ssh_port" "$ssh_key" "$ssh_host" "$remote_base_path" "${files[@]}")
    
    # Compare each file by parsing remote output
    for file in "${files[@]}"; do
        local local_hash=$(get_local_hash "$file")
        local remote_hash=""
        
        # Extract remote hash for this file from output
        if [[ -n "$remote_output" ]]; then
            remote_hash=$(echo "$remote_output" | grep "^$file:" | cut -d':' -f2)
        fi
        
        # Determine status
        if [[ ! -f "$file" ]]; then
            echo "$file:missing"
        elif [[ -z "$local_hash" || -z "$remote_hash" ]]; then
            echo "$file:differ"
        elif [[ "$local_hash" != "$remote_hash" ]]; then
            echo "$file:differ"
        else
            echo "$file:same"
        fi
    done
}

#######################################
# Config file helpers
#######################################
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    fi
}

save_config() {
    cat > "$CONFIG_FILE" << EOF
# Pod sync configuration
SYNC_POD_ID="$SYNC_POD_ID"
SYNC_POD_LIST="$SYNC_POD_LIST"
SYNC_FILES="$SYNC_FILES"
SYNC_SSH_KEY="$SYNC_SSH_KEY"
SYNC_REMOTE_PATH="$SYNC_REMOTE_PATH"
EOF
}

#######################################
# Subcommand functions
#######################################
cmd_status() {
    OVERRIDE_POD_ID=""
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --pod)
                if [[ -z "$2" ]]; then
                    echo "Error: --pod requires a pod ID argument"
                    exit 1
                fi
                OVERRIDE_POD_ID="$2"
                shift 2
                ;;
            -*)
                echo "Unknown option: $1"
                echo "Usage: $0 status [--pod <pod-id>]"
                exit 1
                ;;
            *)
                echo "Unknown argument: $1"
                echo "Usage: $0 status [--pod <pod-id>]"
                exit 1
                ;;
        esac
    done
    
    load_config
    
    # Determine which pods to show status for
    STATUS_PODS=()
    
    SHOW_OVERRIDE_ONLY=false
    if [[ -n "$OVERRIDE_POD_ID" ]]; then
        SHOW_OVERRIDE_ONLY=true
        STATUS_PODS=("$OVERRIDE_POD_ID")
        echo "Pod ID: $OVERRIDE_POD_ID (override)"
    elif [[ -n "$SYNC_POD_LIST" ]]; then
        # Show status for all pods in the list
        IFS=',' read -ra STATUS_PODS <<< "$SYNC_POD_LIST"
        echo "Pod List: $SYNC_POD_LIST"
        
        # Also show single pod if set
        if [[ -n "$SYNC_POD_ID" ]]; then
            echo "Single Pod: $SYNC_POD_ID"
        fi
    elif [[ -n "$SYNC_POD_ID" ]]; then
        # Show status for single configured pod
        STATUS_PODS=("$SYNC_POD_ID")
        echo "Pod ID: $SYNC_POD_ID"
    else
        echo "Pod ID: <not set>"
    fi
    
    # Show status for each pod
    if [[ ${#STATUS_PODS[@]} -gt 0 ]]; then
        echo ""
        
        if [[ ${#STATUS_PODS[@]} -gt 1 && "$SHOW_OVERRIDE_ONLY" == false ]]; then
            echo "=== Pod Status Details ==="
        fi
        
        for pod_id in "${STATUS_PODS[@]}"; do
            if [[ ${#STATUS_PODS[@]} -gt 1 && "$SHOW_OVERRIDE_ONLY" == false ]]; then
                echo ""
                echo "--- Pod: $pod_id ---"
            fi
            
            # Get pod status
            POD_STATUS=""
            CONNECTION_STATUS=""
            
            POD_DETAILS=$(runpodctl get pod "$pod_id" --allfields 2>/dev/null) || true
            if [[ -n "$POD_DETAILS" ]]; then
                # Check if we have actual data (more than just headers)
                DATA_ROWS=$(echo "$POD_DETAILS" | tail -n +2)
                if [[ -n "$DATA_ROWS" ]]; then
                    # Extract status from the output (7th column)
                    POD_STATUS=$(echo "$DATA_ROWS" | awk '{print $7}')
                    
                    # Check if SSH connection is available
                    SSH_CONNECTION=$(echo "$POD_DETAILS" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+:[0-9]\+->22' | head -1)
                    if [[ -n "$SSH_CONNECTION" ]]; then
                        CONNECTION_STATUS="✓ SSH available"
                    else
                        CONNECTION_STATUS="✗ SSH not available"
                    fi
                else
                    POD_STATUS="NOT FOUND"
                    CONNECTION_STATUS="✗ Pod not found"
                fi
            else
                POD_STATUS="NOT FOUND"
                CONNECTION_STATUS="✗ Pod not found"
            fi
            
            echo "Status: $POD_STATUS"
            echo "Connection: $CONNECTION_STATUS"
            
            # For override, store SSH connection for file checking
            if [[ "$SHOW_OVERRIDE_ONLY" == true ]]; then
                OVERRIDE_SSH_CONNECTION="$SSH_CONNECTION"
            fi
        done
        
        if [[ ${#STATUS_PODS[@]} -gt 1 && "$SHOW_OVERRIDE_ONLY" == false ]]; then
            echo ""
            echo "========================="
        fi
    fi
    
    echo "SSH Key: ${SYNC_SSH_KEY:-$DEFAULT_SSH_KEY}"
    echo "Remote Path: ${SYNC_REMOTE_PATH:-$DEFAULT_REMOTE_PATH}"
    
    echo ""
    if [[ -n "$SYNC_FILES" ]]; then
        echo "Files:"
        
        # For file status, determine which pod to check against
        FILE_CHECK_POD=""
        CAN_CHECK_REMOTE=false
        SSH_OPTS=""
        SSH_PORT=""
        SSH_KEY=""
        SSH_HOST=""
        
        if [[ "$SHOW_OVERRIDE_ONLY" == true ]]; then
            # Use override pod
            FILE_CHECK_POD="$OVERRIDE_POD_ID"
            if [[ -n "$OVERRIDE_SSH_CONNECTION" ]]; then
                SSH_HOST=$(echo "$OVERRIDE_SSH_CONNECTION" | cut -d':' -f1)
                SSH_PORT=$(echo "$OVERRIDE_SSH_CONNECTION" | cut -d':' -f2 | cut -d'-' -f1)
                CAN_CHECK_REMOTE=true
            fi
        else
            # Use the first available pod from our status pods
            if [[ ${#STATUS_PODS[@]} -gt 0 ]]; then
                FILE_CHECK_POD="${STATUS_PODS[0]}"
            elif [[ -n "$SYNC_POD_ID" ]]; then
                FILE_CHECK_POD="$SYNC_POD_ID"
            else
                FILE_CHECK_POD="$RUNPOD_POD_ID"
            fi
            
            if [[ -n "$FILE_CHECK_POD" ]]; then
                POD_DETAILS=$(runpodctl get pod "$FILE_CHECK_POD" --allfields 2>/dev/null) || true
                if [[ -n "$POD_DETAILS" ]]; then
                    SSH_CONNECTION=$(echo "$POD_DETAILS" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+:[0-9]\+->22' | head -1)
                    if [[ -n "$SSH_CONNECTION" ]]; then
                        SSH_HOST=$(echo "$SSH_CONNECTION" | cut -d':' -f1)
                        SSH_PORT=$(echo "$SSH_CONNECTION" | cut -d':' -f2 | cut -d'-' -f1)
                        CAN_CHECK_REMOTE=true
                    fi
                fi
            fi
        fi
        
        if [[ -n "$FILE_CHECK_POD" ]]; then
            SSH_KEY="${SYNC_SSH_KEY:-$DEFAULT_SSH_KEY}"
            SSH_KEY=$(eval echo "$SSH_KEY")
        fi
        
        IFS=':' read -ra file_array <<< "$SYNC_FILES"
        
        # Show which pod we're checking files against if multiple pods are configured
        if [[ ${#STATUS_PODS[@]} -gt 1 && -n "$FILE_CHECK_POD" && "$SHOW_OVERRIDE_ONLY" == false ]]; then
            echo "(File status checked against pod: $FILE_CHECK_POD)"
        fi
        
        if [[ "$CAN_CHECK_REMOTE" == false ]]; then
            # Can't check remote, show basic status
            for file in "${file_array[@]}"; do
                if [[ ! -f "$file" ]]; then
                    echo "  ∄ $file"
                else
                    echo "  ? $file"
                fi
            done
        else
            # Use batch comparison for efficiency
            batch_output=$(batch_files_differ "$SSH_PORT" "$SSH_KEY" "root@$SSH_HOST" "${SYNC_REMOTE_PATH:-$DEFAULT_REMOTE_PATH}" "${file_array[@]}")
            
            while IFS=':' read -r file status; do
                case "$status" in
                    "missing")
                        echo "  ∄ $file"
                        ;;
                    "differ")
                        echo "  ≠ $file"
                        ;;
                    "same")
                        echo "  = $file"
                        ;;
                esac
            done <<< "$batch_output"
        fi
    else
        echo "Files: <none>"
    fi
}

cmd_set_pod() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 set-pod <pod-id>"
        exit 1
    fi
    
    load_config
    SYNC_POD_ID="$1"
    save_config
    echo "Pod ID set to: $SYNC_POD_ID"
}

cmd_forget_pod() {
    load_config
    if [[ -z "$SYNC_POD_ID" ]]; then
        echo "No pod ID is currently set"
        exit 0
    fi
    
    echo "Clearing pod ID: $SYNC_POD_ID"
    SYNC_POD_ID=""
    save_config
    echo "Pod ID cleared"
}

cmd_set_pods() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 set-pods <pod1,pod2,pod3>"
        exit 1
    fi
    
    load_config
    SYNC_POD_LIST="$1"
    save_config
    echo "Pod list set to: $SYNC_POD_LIST"
}

cmd_add_pod() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 add-pod <pod-id>"
        exit 1
    fi
    
    load_config
    
    local new_pod="$1"
    
    # Add to pod list if not already present
    if [[ -z "$SYNC_POD_LIST" ]]; then
        SYNC_POD_LIST="$new_pod"
        save_config
        echo "Added pod: $new_pod"
    elif [[ ",$SYNC_POD_LIST," != *",$new_pod,"* ]]; then
        SYNC_POD_LIST="$SYNC_POD_LIST,$new_pod"
        save_config
        echo "Added pod: $new_pod"
    else
        echo "Pod '$new_pod' already in pod list"
        exit 0
    fi
}

cmd_remove_pod() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 remove-pod <pod-id>"
        exit 1
    fi
    
    load_config
    
    if [[ -z "$SYNC_POD_LIST" ]]; then
        echo "No pods in pod list"
        exit 0
    fi
    
    local remove_pod="$1"
    local new_pod_list=""
    
    # Split pod list and rebuild without the target pod
    IFS=',' read -ra pod_array <<< "$SYNC_POD_LIST"
    local found=false
    
    for pod in "${pod_array[@]}"; do
        if [[ "$pod" == "$remove_pod" ]]; then
            found=true
        else
            if [[ -z "$new_pod_list" ]]; then
                new_pod_list="$pod"
            else
                new_pod_list="$new_pod_list,$pod"
            fi
        fi
    done
    
    if [[ "$found" == false ]]; then
        echo "Pod '$remove_pod' not found in pod list"
        exit 1
    fi
    
    SYNC_POD_LIST="$new_pod_list"
    save_config
    echo "Removed pod: $remove_pod"
}

cmd_list_pods() {
    load_config
    if [[ -z "$SYNC_POD_LIST" ]]; then
        echo "No pods in pod list"
        exit 0
    fi
    
    IFS=',' read -ra pod_array <<< "$SYNC_POD_LIST"
    for pod in "${pod_array[@]}"; do
        echo "$pod"
    done
}

cmd_clear_pods() {
    load_config
    if [[ -z "$SYNC_POD_LIST" ]]; then
        echo "Pod list is already empty"
        exit 0
    fi
    
    echo "Clearing pod list"
    SYNC_POD_LIST=""
    save_config
    echo "Pod list cleared"
}

cmd_list_files() {
    load_config
    if [[ -z "$SYNC_FILES" ]]; then
        echo "No files in sync list"
        exit 0
    fi
    
    IFS=':' read -ra file_array <<< "$SYNC_FILES"
    for file in "${file_array[@]}"; do
        echo "$file"
    done
}

cmd_remove_all() {
    load_config
    if [[ -z "$SYNC_FILES" ]]; then
        echo "File list is already empty"
        exit 0
    fi
    
    echo "Clearing file list"
    SYNC_FILES=""
    save_config
    echo "File list cleared"
}

cmd_add() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 add <file-path> [file-path ...]"
        exit 1
    fi
    
    load_config
    
    local files_added=()
    local files_skipped=()
    
    # Process each file argument
    for file in "$@"; do
        # Check if file exists
        if [[ ! -f "$file" ]]; then
            echo "Warning: File '$file' does not exist locally"
            read -p "Add anyway? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                files_skipped+=("$file")
                continue
            fi
        fi
        
        # Add to sync files if not already present
        if [[ -z "$SYNC_FILES" ]]; then
            SYNC_FILES="$file"
            files_added+=("$file")
        elif [[ ":$SYNC_FILES:" != *":$file:"* ]]; then
            SYNC_FILES="$SYNC_FILES:$file"
            files_added+=("$file")
        else
            echo "File '$file' already in sync list"
            files_skipped+=("$file")
        fi
    done
    
    # Save config if any files were added
    if [[ ${#files_added[@]} -gt 0 ]]; then
        save_config
        echo "Added: ${files_added[*]}"
    fi
    
    # Report skipped files
    if [[ ${#files_skipped[@]} -gt 0 ]]; then
        echo "Skipped: ${files_skipped[*]}"
    fi
}

cmd_remove() {
    local remove_missing=false
    local files_to_remove=()
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --missing|-m)
                remove_missing=true
                shift
                ;;
            -*)
                echo "Unknown option: $1"
                echo "Usage: $0 remove [--missing|-m] <file-path> [file-path ...]"
                exit 1
                ;;
            *)
                files_to_remove+=("$1")
                shift
                ;;
        esac
    done
    
    # Check if we have any files to remove (either explicit or missing detection)
    if [[ ${#files_to_remove[@]} -eq 0 && "$remove_missing" == false ]]; then
        echo "Usage: $0 remove [--missing|-m] <file-path> [file-path ...]"
        exit 1
    fi
    
    load_config
    
    if [[ -z "$SYNC_FILES" ]]; then
        echo "No files in sync list"
        exit 0
    fi
    
    local files_removed=()
    local files_not_found=()
    local missing_files=()
    
    # If --missing flag is set, find all files that don't exist locally
    if [[ "$remove_missing" == true ]]; then
        IFS=':' read -ra file_array <<< "$SYNC_FILES"
        for file in "${file_array[@]}"; do
            if [[ ! -f "$file" ]]; then
                missing_files+=("$file")
            fi
        done
        
        # Add missing files to removal list
        files_to_remove+=("${missing_files[@]}")
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "Found missing local files: ${missing_files[*]}"
        else
            echo "No missing local files found"
        fi
    fi
    
    # If no files to remove after processing, exit
    if [[ ${#files_to_remove[@]} -eq 0 ]]; then
        echo "No files to remove"
        exit 0
    fi
    
    # Start with current sync files
    NEW_FILES=""
    IFS=':' read -ra file_array <<< "$SYNC_FILES"
    
    # Build new file list excluding files to remove
    for file in "${file_array[@]}"; do
        local should_remove=false
        for remove_file in "${files_to_remove[@]}"; do
            if [[ "$file" == "$remove_file" ]]; then
                should_remove=true
                files_removed+=("$remove_file")
                break
            fi
        done
        
        if [[ "$should_remove" == false ]]; then
            if [[ -z "$NEW_FILES" ]]; then
                NEW_FILES="$file"
            else
                NEW_FILES="$NEW_FILES:$file"
            fi
        fi
    done
    
    # Check for files that weren't found
    for remove_file in "${files_to_remove[@]}"; do
        local found=false
        for removed_file in "${files_removed[@]}"; do
            if [[ "$remove_file" == "$removed_file" ]]; then
                found=true
                break
            fi
        done
        if [[ "$found" == false ]]; then
            files_not_found+=("$remove_file")
        fi
    done
    
    # Update sync files and save config if any files were removed
    if [[ ${#files_removed[@]} -gt 0 ]]; then
        SYNC_FILES="$NEW_FILES"
        save_config
        echo "Removed: ${files_removed[*]}"
    fi
    
    # Report files not found
    if [[ ${#files_not_found[@]} -gt 0 ]]; then
        echo "Not found in sync list: ${files_not_found[*]}"
    fi
    
    # Exit with error only if no files were removed
    if [[ ${#files_removed[@]} -eq 0 ]]; then
        exit 1
    fi
}

cmd_set_remote_path() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 set-remote-path <path>"
        exit 1
    fi
    
    load_config
    SYNC_REMOTE_PATH="$1"
    save_config
    echo "Remote path set to: $SYNC_REMOTE_PATH"
}

cmd_get_ssh() {
    OVERRIDE_POD_ID=""
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --pod)
                if [[ -z "$2" ]]; then
                    echo "Error: --pod requires a pod ID argument"
                    exit 1
                fi
                OVERRIDE_POD_ID="$2"
                shift 2
                ;;
            -*)
                echo "Unknown option: $1"
                echo "Usage: $0 get-ssh [--pod <pod-id>]"
                exit 1
                ;;
            *)
                echo "Unknown argument: $1"
                echo "Usage: $0 get-ssh [--pod <pod-id>]"
                exit 1
                ;;
        esac
    done
    
    load_config

    # Validate environment
    # Use override pod ID if provided, otherwise fall back to config/env
    POD_ID="${OVERRIDE_POD_ID:-${SYNC_POD_ID:-$RUNPOD_POD_ID}}"
    if [[ -z "$POD_ID" ]]; then
        echo "Error: No pod ID specified"
        echo "Use: $0 set-pod <pod-id> or $0 get-ssh --pod <pod-id>"
        exit 1
    fi
    
    SSH_KEY="${SYNC_SSH_KEY:-$DEFAULT_SSH_KEY}"
    SSH_KEY=$(eval echo "$SSH_KEY")  # Expand ~ if present

    # Get SSH connection details
    POD_DETAILS=$(runpodctl get pod "$POD_ID" --allfields 2>/dev/null) || {
        echo "Error: Failed to get pod details" >&2
        echo "Make sure pod ID '$POD_ID' exists and runpodctl is configured" >&2
        exit 1
    }
    
    # Extract SSH host and port
    SSH_CONNECTION=$(echo "$POD_DETAILS" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+:[0-9]\+->22' | head -1)
    if [[ -z "$SSH_CONNECTION" ]]; then
        echo "Error: Could not extract SSH connection details" >&2
        echo "Pod might not be running or SSH might not be available" >&2
        exit 1
    fi
    
    SSH_HOST=$(echo "$SSH_CONNECTION" | cut -d':' -f1)
    SSH_PORT=$(echo "$SSH_CONNECTION" | cut -d':' -f2 | cut -d'-' -f1)
    
    echo "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -p $SSH_PORT -i $SSH_KEY root@$SSH_HOST"
}

cmd_ssh() {
    load_config

    OVERRIDE_POD_ID=""
    
    # Parse options (must come before remote command)
    while [[ $# -gt 0 ]]; do
        case $1 in
            --pod)
                if [[ -z "$2" ]]; then
                    echo "Error: --pod requires a pod ID argument"
                    exit 1
                fi
                OVERRIDE_POD_ID="$2"
                shift 2
                ;;
            -*)
                echo "Unknown option: $1"
                echo "Usage: $0 ssh [--pod <pod-id>] [command]"
                exit 1
                ;;
            *)
                # This is a command argument, stop parsing options
                break
                ;;
        esac
    done

    # Validate environment
    # Use override pod ID if provided, otherwise fall back to config/env
    POD_ID="${OVERRIDE_POD_ID:-${SYNC_POD_ID:-$RUNPOD_POD_ID}}"
    if [[ -z "$POD_ID" ]]; then
        echo "Error: No pod ID specified"
        echo "Use: $0 set-pod <pod-id> or $0 ssh --pod <pod-id>"
        exit 1
    fi
    
    SSH_KEY="${SYNC_SSH_KEY:-$DEFAULT_SSH_KEY}"
    SSH_KEY=$(eval echo "$SSH_KEY")  # Expand ~ if present

    # Get SSH connection details
    POD_DETAILS=$(runpodctl get pod "$POD_ID" --allfields 2>/dev/null) || {
        echo "Error: Failed to get pod details"
        echo "Make sure pod ID '$POD_ID' exists and runpodctl is configured"
        exit 1
    }
    
    # Extract SSH host and port
    SSH_CONNECTION=$(echo "$POD_DETAILS" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+:[0-9]\+->22' | head -1)
    if [[ -z "$SSH_CONNECTION" ]]; then
        echo "Error: Could not extract SSH connection details"
        echo "Pod might not be running or SSH might not be available"
        exit 1
    fi
    
    SSH_HOST=$(echo "$SSH_CONNECTION" | cut -d':' -f1)
    SSH_PORT=$(echo "$SSH_CONNECTION" | cut -d':' -f2 | cut -d'-' -f1)
    
    # Execute SSH connection or command
    if [[ $# -eq 0 ]]; then
        # Interactive SSH session
        exec ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -p "$SSH_PORT" -i "$SSH_KEY" "root@$SSH_HOST"
    else
        # Execute remote command
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -p "$SSH_PORT" -i "$SSH_KEY" "root@$SSH_HOST" "$@"
    fi
}

#######################################
# Print help
#######################################
print_help() {
    cat << EOF
Pod File Sync Tool

Usage:
  $0 <command> [options]

Commands:
  sync                      Sync files to pod (default)
  status [--pod <pod-id>]   Show current pod ID and sync files
  
Pod Management:
  set-pod <id>              Set the target pod ID
  forget-pod                Clear the current pod ID
  set-pods <pod1,pod2>      Set the default pod list for multi-sync
  add-pod <pod-id>          Add pod to the pod list
  remove-pod <pod-id>       Remove pod from the pod list
  list-pods                 List pods in the pod list
  clear-pods                Clear all pods from the pod list
  
File Management:
  add <file> [file ...]     Add files to the sync list
  remove [--missing|-m] <file> [file ...]  Remove files from the sync list
  list-files                List files in the sync list
  remove-all                Clear all files from the sync list
  
Remote Access:
  set-remote-path <path>    Set the remote base path (default: /workspace)
  get-ssh [--pod <pod-id>]  Print SSH command for current pod
  ssh [--pod <pod-id>] [command]  Connect to pod via SSH or execute remote command
  help                      Show this help

Sync Options:
  --dry-run                 Show what would be synced without doing it
  --remote-path <path>      Override remote base path for this sync
  --pod <pod-id>            Override target pod ID for this sync
  --pods <pod1,pod2,pod3>   Sync to multiple pods simultaneously

Examples:
  # Pod management
  $0 set-pod k4kb5h7yt7n15n            # Set single active pod
  $0 set-pods dev,staging,prod         # Set multi-pod list for deployment
  $0 add-pod testing                   # Add another pod to the list
  $0 list-pods                         # Show current pod list
  $0 remove-pod staging                # Remove a pod from the list
  $0 forget-pod                        # Clear single pod
  $0 clear-pods                        # Clear pod list
  
  # File management
  $0 add bin/run_experiments.sh config.json
  $0 list-files
  $0 remove old_file.txt
  $0 remove --missing                  # Remove all files that don't exist locally
  $0 remove-all                        # Clear file list
  
  # Syncing
  $0 status                            # Show current configuration
  $0 sync                              # Sync using configured pods
  $0 sync --dry-run                    # Dry run with configured pods
  $0 sync --pod k4kb5h7yt7n15n         # Override to sync to single pod
  $0 sync --pods pod1,pod2,pod3        # Override to sync to specific pods
  $0 sync --remote-path /tmp/test      # Override remote path
  
  # Remote access
  $0 get-ssh
  $0 get-ssh --pod k4kb5h7yt7n15n      # Get SSH command for specific pod
  $0 ssh
  $0 ssh "ls -la"
  $0 ssh --pod k4kb5h7yt7n15n "ls -la" # Run command on specific pod

EOF
}

#######################################
# Single pod sync helper function
#######################################
sync_to_single_pod() {
    local pod_id="$1"
    local ssh_key="$2"
    local remote_base_path="$3"
    local dry_run="$4"
    shift 4
    local files=("$@")
    
    # Get SSH connection details
    local pod_details
    pod_details=$(runpodctl get pod "$pod_id" --allfields 2>/dev/null) || {
        echo "Error: Failed to get pod details for $pod_id" >&2
        return 1
    }
    
    # Extract SSH host and port
    local ssh_connection
    ssh_connection=$(echo "$pod_details" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+:[0-9]\+->22' | head -1)
    if [[ -z "$ssh_connection" ]]; then
        echo "Error: Could not extract SSH connection details for $pod_id" >&2
        return 1
    fi
    
    local ssh_host ssh_port
    ssh_host=$(echo "$ssh_connection" | cut -d':' -f1)
    ssh_port=$(echo "$ssh_connection" | cut -d':' -f2 | cut -d'-' -f1)
    
    echo "SSH connection: root@$ssh_host:$ssh_port" >&2
    echo "Remote base path: $remote_base_path" >&2
    echo "Syncing ${#files[@]} files..." >&2
    
    local synced_count=0
    local skipped_count=0
    
    if [[ "$dry_run" == true ]]; then
        # Use batch comparison for dry run
        local batch_output
        batch_output=$(batch_files_differ "$ssh_port" "$ssh_key" "root@$ssh_host" "$remote_base_path" "${files[@]}")
        
        local OLDIFS=$IFS
        IFS=$'\n'
        
        for line in $batch_output; do
            if [[ -z "$line" ]]; then
                continue
            fi
            
            local file status remote_path
            file=$(echo "$line" | cut -d':' -f1)
            status=$(echo "$line" | cut -d':' -f2)
            remote_path="$remote_base_path/$file"
            
            case "$status" in
                "differ"|"missing")
                    echo "  [DRY RUN] $file → $remote_path (would sync)" >&2
                    ((synced_count++))
                    ;;
                "same")
                    echo "  [DRY RUN] $file → $remote_path (unchanged, would skip)" >&2
                    ((skipped_count++))
                    ;;
            esac
        done
        
        IFS=$OLDIFS
    else
        # Use batch comparison for sync
        echo "  Checking all files..." >&2
        local batch_output
        batch_output=$(batch_files_differ "$ssh_port" "$ssh_key" "root@$ssh_host" "$remote_base_path" "${files[@]}")
        
        local OLDIFS=$IFS
        IFS=$'\n'
        
        for line in $batch_output; do
            if [[ -z "$line" ]]; then
                continue
            fi
            
            local file status remote_path
            file=$(echo "$line" | cut -d':' -f1)
            status=$(echo "$line" | cut -d':' -f2)
            remote_path="$remote_base_path/$file"
            
            case "$status" in
                "differ"|"missing")
                    echo "  Syncing: $file" >&2
                    
                    # Create remote directory if needed
                    local remote_dir
                    remote_dir=$(dirname "$remote_path")
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -p "$ssh_port" -i "$ssh_key" "root@$ssh_host" \
                        "mkdir -p '$remote_dir'" || {
                        echo "    Failed to create remote directory: $remote_dir" >&2
                        continue
                    }
                    
                    # Copy the file
                    scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -P "$ssh_port" -i "$ssh_key" \
                        "$file" "root@$ssh_host:$remote_path" || {
                        echo "    Failed to sync: $file" >&2
                        continue
                    }
                    
                    echo "    ✓ Synced" >&2
                    ((synced_count++))
                    ;;
                "same")
                    echo "  ✓ $file (unchanged)" >&2
                    ((skipped_count++))
                    ;;
            esac
        done
        
        IFS=$OLDIFS
    fi
    
    # Return counts in format "synced:skipped"
    echo "$synced_count:$skipped_count"
    return 0
}

cmd_sync() {
    DRY_RUN=false
    OVERRIDE_REMOTE_PATH=""
    OVERRIDE_POD_ID=""
    OVERRIDE_POD_IDS=()
    
    # Parse sync-specific options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --remote-path)
                if [[ -z "$2" ]]; then
                    echo "Error: --remote-path requires a path argument"
                    exit 1
                fi
                OVERRIDE_REMOTE_PATH="$2"
                shift 2
                ;;
            --pod)
                if [[ -z "$2" ]]; then
                    echo "Error: --pod requires a pod ID argument"
                    exit 1
                fi
                OVERRIDE_POD_ID="$2"
                shift 2
                ;;
            --pods)
                if [[ -z "$2" ]]; then
                    echo "Error: --pods requires a comma-separated list of pod IDs"
                    exit 1
                fi
                # Split comma-separated pod IDs into array
                IFS=',' read -ra OVERRIDE_POD_IDS <<< "$2"
                shift 2
                ;;
            *)
                echo "Unknown sync option: $1"
                exit 1
                ;;
        esac
    done
    
    load_config

    # Validate environment and determine target pods
    TARGET_PODS=()
    
    # Check for conflicting options
    if [[ -n "$OVERRIDE_POD_ID" && ${#OVERRIDE_POD_IDS[@]} -gt 0 ]]; then
        echo "Error: Cannot use both --pod and --pods flags"
        echo "Use either --pod <pod-id> or --pods <pod1,pod2,pod3>"
        exit 1
    fi
    
    # Determine which pods to sync to
    if [[ ${#OVERRIDE_POD_IDS[@]} -gt 0 ]]; then
        # Multi-pod sync via --pods flag
        TARGET_PODS=("${OVERRIDE_POD_IDS[@]}")
    elif [[ -n "$OVERRIDE_POD_ID" ]]; then
        # Single pod override via --pod flag
        TARGET_PODS=("$OVERRIDE_POD_ID")
    elif [[ -n "$SYNC_POD_LIST" ]]; then
        # Use configured pod list
        IFS=',' read -ra TARGET_PODS <<< "$SYNC_POD_LIST"
    else
        # Use configured/env single pod ID
        POD_ID="${SYNC_POD_ID:-$RUNPOD_POD_ID}"
        if [[ -z "$POD_ID" ]]; then
            echo "Error: No pod ID specified"
            echo "Use: $0 set-pod <pod-id>, $0 set-pods <pod1,pod2>, $0 sync --pod <pod-id>, or $0 sync --pods <pod1,pod2>"
            exit 1
        fi
        TARGET_PODS=("$POD_ID")
    fi
    
    if [[ -z "$SYNC_FILES" ]]; then
        echo "Error: No files specified"
        echo "Use: $0 add <file-path>"
        exit 1
    fi
    
    SSH_KEY="${SYNC_SSH_KEY:-$DEFAULT_SSH_KEY}"
    SSH_KEY=$(eval echo "$SSH_KEY")  # Expand ~ if present

    # Determine remote base path (override > config > default)
    REMOTE_BASE_PATH="${OVERRIDE_REMOTE_PATH:-${SYNC_REMOTE_PATH:-$DEFAULT_REMOTE_PATH}}"

    # Validate local files first
    echo "Validating local files..."
    
    VALID_FILES=()
    IFS=':' read -ra file_array <<< "$SYNC_FILES"
    for file in "${file_array[@]}"; do
        if [[ -f "$file" ]]; then
            VALID_FILES+=("$file")
            echo "  ✓ $file"
        else
            echo "  ✗ $file (not found)"
        fi
    done
    
    if [[ ${#VALID_FILES[@]} -eq 0 ]]; then
        echo "Error: No valid files to sync"
        exit 1
    fi

    # Multi-pod sync logic
    if [[ ${#TARGET_PODS[@]} -gt 1 ]]; then
        echo ""
        echo "Syncing to ${#TARGET_PODS[@]} pods: ${TARGET_PODS[*]}"
        
        # Validate all pods first
        echo "Validating all pods..."
        INVALID_PODS=()
        
        for pod_id in "${TARGET_PODS[@]}"; do
            POD_DETAILS=$(runpodctl get pod "$pod_id" --allfields 2>/dev/null) || {
                echo "  ✗ $pod_id (failed to get details)"
                INVALID_PODS+=("$pod_id")
                continue
            }
            
            SSH_CONNECTION=$(echo "$POD_DETAILS" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+:[0-9]\+->22' | head -1)
            if [[ -z "$SSH_CONNECTION" ]]; then
                echo "  ✗ $pod_id (SSH not available)"
                INVALID_PODS+=("$pod_id")
            else
                echo "  ✓ $pod_id (available)"
            fi
        done
        
        if [[ ${#INVALID_PODS[@]} -gt 0 ]]; then
            echo "Error: Some pods unavailable: ${INVALID_PODS[*]}"
            echo "Aborting multi-pod sync."
            exit 1
        fi
        
        # Sync to each pod
        TOTAL_SYNCED=0
        TOTAL_SKIPPED=0
        POD_RESULTS=()
        
        for pod_id in "${TARGET_PODS[@]}"; do
            echo ""
            echo "=== Syncing to pod: $pod_id ==="
            
            # Call single pod sync function
            sync_result=$(sync_to_single_pod "$pod_id" "$SSH_KEY" "$REMOTE_BASE_PATH" "$DRY_RUN" "${VALID_FILES[@]}")
            sync_exit_code=$?
            
            if [[ $sync_exit_code -eq 0 ]]; then
                # Parse result: "synced_count:skipped_count"
                synced_count=$(echo "$sync_result" | cut -d':' -f1)
                skipped_count=$(echo "$sync_result" | cut -d':' -f2)
                
                TOTAL_SYNCED=$((TOTAL_SYNCED + synced_count))
                TOTAL_SKIPPED=$((TOTAL_SKIPPED + skipped_count))
                POD_RESULTS+=("$pod_id: $synced_count synced, $skipped_count unchanged")
            else
                POD_RESULTS+=("$pod_id: FAILED")
            fi
        done
        
        # Print summary
        echo ""
        echo "=== Multi-Pod Sync Summary ==="
        for result in "${POD_RESULTS[@]}"; do
            echo "$result"
        done
        
        if [[ "$DRY_RUN" == true ]]; then
            echo ""
            echo "Multi-pod dry run complete. Use without --dry-run to actually sync files."
        else
            echo ""
            echo "Multi-pod sync complete! ($TOTAL_SYNCED total synced, $TOTAL_SKIPPED total unchanged across ${#TARGET_PODS[@]} pods)"
        fi
        
        return 0
    fi

    # Single pod sync (use helper function)
    POD_ID="${TARGET_PODS[0]}"
    echo ""
    echo "Syncing to single pod: $POD_ID"
    
    # Call single pod sync function
    sync_result=$(sync_to_single_pod "$POD_ID" "$SSH_KEY" "$REMOTE_BASE_PATH" "$DRY_RUN" "${VALID_FILES[@]}")
    sync_exit_code=$?
    
    if [[ $sync_exit_code -ne 0 ]]; then
        echo "Error: Failed to sync to pod $POD_ID"
        exit 1
    fi
    
    # Parse result: "synced_count:skipped_count"
    SYNCED_COUNT=$(echo "$sync_result" | cut -d':' -f1)
    SKIPPED_COUNT=$(echo "$sync_result" | cut -d':' -f2)
    
    if [[ "$DRY_RUN" == true ]]; then
        echo ""
        echo "Dry run complete. Use without --dry-run to actually sync files."
    else
        echo ""
        echo "Sync complete! ($SYNCED_COUNT synced, $SKIPPED_COUNT unchanged)"
    fi
}

#######################################
# Main command dispatcher
#######################################

# Get the command (default to sync for backwards compatibility)
COMMAND="${1:-sync}"

# Handle help early
if [[ "$COMMAND" == "help" || "$COMMAND" == "--help" || "$COMMAND" == "-h" ]]; then
    print_help
    exit 0
fi

# Shift to remove command from arguments
if [[ $# -gt 0 ]]; then
    shift
fi

# Dispatch to subcommand
case "$COMMAND" in
    sync)
        cmd_sync "$@"
        ;;
    status)
        cmd_status "$@"
        ;;
    set-pod)
        cmd_set_pod "$@"
        ;;
    forget-pod)
        cmd_forget_pod
        ;;
    set-pods)
        cmd_set_pods "$@"
        ;;
    add-pod)
        cmd_add_pod "$@"
        ;;
    remove-pod)
        cmd_remove_pod "$@"
        ;;
    list-pods)
        cmd_list_pods
        ;;
    clear-pods)
        cmd_clear_pods
        ;;
    set-remote-path)
        cmd_set_remote_path "$@"
        ;;
    add)
        cmd_add "$@"
        ;;
    remove)
        cmd_remove "$@"
        ;;
    list-files)
        cmd_list_files
        ;;
    remove-all)
        cmd_remove_all
        ;;
    get-ssh)
        cmd_get_ssh "$@"
        ;;
    ssh)
        cmd_ssh "$@"
        ;;
    *)
        echo "Unknown command: $COMMAND"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac