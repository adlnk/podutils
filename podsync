#!/bin/bash

#######################################
# Pod File Sync Tool
#
# Syncs local files to their corresponding locations on a RunPod instance.
# Uses .podsync config file for configuration:
#   SYNC_POD_ID - Target pod ID
#   SYNC_FILES - Colon-separated list of local files to sync
#   SYNC_SSH_KEY - SSH key path (optional, defaults to ~/.ssh/id_ed25519)
#   SYNC_REMOTE_PATH - Remote base path (configurable)
#######################################

set -e

# Default values
DEFAULT_SSH_KEY="~/.ssh/id_ed25519"
DEFAULT_REMOTE_PATH="/workspace"
CONFIG_FILE=".podsync"

#######################################
# Config file helpers
#######################################
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    fi
}

save_config() {
    cat > "$CONFIG_FILE" << EOF
# Pod sync configuration
SYNC_POD_ID="$SYNC_POD_ID"
SYNC_FILES="$SYNC_FILES"
SYNC_SSH_KEY="$SYNC_SSH_KEY"
SYNC_REMOTE_PATH="$SYNC_REMOTE_PATH"
EOF
}

#######################################
# Subcommand functions
#######################################
cmd_status() {
    load_config
    echo "Pod ID: ${SYNC_POD_ID:-<not set>}"
    echo "SSH Key: ${SYNC_SSH_KEY:-$DEFAULT_SSH_KEY}"
    echo "Remote Path: ${SYNC_REMOTE_PATH:-$DEFAULT_REMOTE_PATH}"
    
    if [[ -n "$SYNC_FILES" ]]; then
        echo "Files:"
        IFS=':' read -ra file_array <<< "$SYNC_FILES"
        for file in "${file_array[@]}"; do
            if [[ -f "$file" ]]; then
                echo "  ✓ $file"
            else
                echo "  ✗ $file (not found)"
            fi
        done
    else
        echo "Files: <none>"
    fi
}

cmd_set_pod() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 set-pod <pod-id>"
        exit 1
    fi
    
    load_config
    SYNC_POD_ID="$1"
    save_config
    echo "Pod ID set to: $SYNC_POD_ID"
}

cmd_add() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 add <file-path> [file-path ...]"
        exit 1
    fi
    
    load_config
    
    local files_added=()
    local files_skipped=()
    
    # Process each file argument
    for file in "$@"; do
        # Check if file exists
        if [[ ! -f "$file" ]]; then
            echo "Warning: File '$file' does not exist locally"
            read -p "Add anyway? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                files_skipped+=("$file")
                continue
            fi
        fi
        
        # Add to sync files if not already present
        if [[ -z "$SYNC_FILES" ]]; then
            SYNC_FILES="$file"
            files_added+=("$file")
        elif [[ ":$SYNC_FILES:" != *":$file:"* ]]; then
            SYNC_FILES="$SYNC_FILES:$file"
            files_added+=("$file")
        else
            echo "File '$file' already in sync list"
            files_skipped+=("$file")
        fi
    done
    
    # Save config if any files were added
    if [[ ${#files_added[@]} -gt 0 ]]; then
        save_config
        echo "Added: ${files_added[*]}"
    fi
    
    # Report skipped files
    if [[ ${#files_skipped[@]} -gt 0 ]]; then
        echo "Skipped: ${files_skipped[*]}"
    fi
}

cmd_remove() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 remove <file-path> [file-path ...]"
        exit 1
    fi
    
    load_config
    
    if [[ -z "$SYNC_FILES" ]]; then
        echo "No files in sync list"
        exit 0
    fi
    
    local files_removed=()
    local files_not_found=()
    
    # Create a list of files to remove
    local files_to_remove=("$@")
    
    # Start with current sync files
    NEW_FILES=""
    IFS=':' read -ra file_array <<< "$SYNC_FILES"
    
    # Build new file list excluding files to remove
    for file in "${file_array[@]}"; do
        local should_remove=false
        for remove_file in "${files_to_remove[@]}"; do
            if [[ "$file" == "$remove_file" ]]; then
                should_remove=true
                files_removed+=("$remove_file")
                break
            fi
        done
        
        if [[ "$should_remove" == false ]]; then
            if [[ -z "$NEW_FILES" ]]; then
                NEW_FILES="$file"
            else
                NEW_FILES="$NEW_FILES:$file"
            fi
        fi
    done
    
    # Check for files that weren't found
    for remove_file in "${files_to_remove[@]}"; do
        local found=false
        for removed_file in "${files_removed[@]}"; do
            if [[ "$remove_file" == "$removed_file" ]]; then
                found=true
                break
            fi
        done
        if [[ "$found" == false ]]; then
            files_not_found+=("$remove_file")
        fi
    done
    
    # Update sync files and save config if any files were removed
    if [[ ${#files_removed[@]} -gt 0 ]]; then
        SYNC_FILES="$NEW_FILES"
        save_config
        echo "Removed: ${files_removed[*]}"
    fi
    
    # Report files not found
    if [[ ${#files_not_found[@]} -gt 0 ]]; then
        echo "Not found in sync list: ${files_not_found[*]}"
    fi
    
    # Exit with error only if no files were removed
    if [[ ${#files_removed[@]} -eq 0 ]]; then
        exit 1
    fi
}

cmd_set_remote_path() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 set-remote-path <path>"
        exit 1
    fi
    
    load_config
    SYNC_REMOTE_PATH="$1"
    save_config
    echo "Remote path set to: $SYNC_REMOTE_PATH"
}

#######################################
# Print help
#######################################
print_help() {
    cat << EOF
Pod File Sync Tool

Usage:
  $0 <command> [options]

Commands:
  sync                      Sync files to pod (default)
  status                    Show current pod ID and sync files
  set-pod <id>              Set the target pod ID
  set-remote-path <path>    Set the remote base path (default: /workspace)
  add <file>                Add a file to the sync list
  remove <file>             Remove a file from the sync list
  help                      Show this help

Sync Options:
  --dry-run                 Show what would be synced without doing it
  --remote-path <path>      Override remote base path for this sync

Examples:
  $0 set-pod k4kb5h7yt7n15n
  $0 set-remote-path /workspace/my-project
  $0 add bin/run_experiments.sh
  $0 add config.json
  $0 status
  $0 sync
  $0 sync --dry-run
  $0 sync --remote-path /tmp/test
  $0 remove old_file.txt

EOF
}

cmd_sync() {
    DRY_RUN=false
    OVERRIDE_REMOTE_PATH=""
    
    # Parse sync-specific options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --remote-path)
                if [[ -z "$2" ]]; then
                    echo "Error: --remote-path requires a path argument"
                    exit 1
                fi
                OVERRIDE_REMOTE_PATH="$2"
                shift 2
                ;;
            *)
                echo "Unknown sync option: $1"
                exit 1
                ;;
        esac
    done
    
    load_config

    # Validate environment
    POD_ID="${SYNC_POD_ID:-$RUNPOD_POD_ID}"
    if [[ -z "$POD_ID" ]]; then
        echo "Error: No pod ID specified"
        echo "Use: $0 set-pod <pod-id>"
        exit 1
    fi
    
    if [[ -z "$SYNC_FILES" ]]; then
        echo "Error: No files specified"
        echo "Use: $0 add <file-path>"
        exit 1
    fi
    
    SSH_KEY="${SYNC_SSH_KEY:-$DEFAULT_SSH_KEY}"
    SSH_KEY=$(eval echo "$SSH_KEY")  # Expand ~ if present

    # Determine remote base path (override > config > default)
    REMOTE_BASE_PATH="${OVERRIDE_REMOTE_PATH:-${SYNC_REMOTE_PATH:-$DEFAULT_REMOTE_PATH}}"

    # Get SSH connection details
    echo "Getting SSH details for pod: $POD_ID"
    
    POD_DETAILS=$(runpodctl get pod "$POD_ID" --allfields 2>/dev/null) || {
        echo "Error: Failed to get pod details"
        echo "Make sure pod ID '$POD_ID' exists and runpodctl is configured"
        exit 1
    }
    
    # Extract SSH host and port
    SSH_CONNECTION=$(echo "$POD_DETAILS" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+:[0-9]\+->22' | head -1)
    if [[ -z "$SSH_CONNECTION" ]]; then
        echo "Error: Could not extract SSH connection details"
        echo "Pod might not be running or SSH might not be available"
        exit 1
    fi
    
    SSH_HOST=$(echo "$SSH_CONNECTION" | cut -d':' -f1)
    SSH_PORT=$(echo "$SSH_CONNECTION" | cut -d':' -f2 | cut -d'-' -f1)
    
    echo "SSH connection: root@$SSH_HOST:$SSH_PORT"
    echo "Remote base path: $REMOTE_BASE_PATH"

    # Validate local files
    echo "Validating local files..."
    
    VALID_FILES=()
    IFS=':' read -ra file_array <<< "$SYNC_FILES"
    for file in "${file_array[@]}"; do
        if [[ -f "$file" ]]; then
            VALID_FILES+=("$file")
            echo "  ✓ $file"
        else
            echo "  ✗ $file (not found)"
        fi
    done
    
    if [[ ${#VALID_FILES[@]} -eq 0 ]]; then
        echo "Error: No valid files to sync"
        exit 1
    fi

    # Sync files
    echo "Syncing ${#VALID_FILES[@]} files..."
    
    SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"
    
    for file in "${VALID_FILES[@]}"; do
        remote_path="$REMOTE_BASE_PATH/$file"
        
        if [[ "$DRY_RUN" == true ]]; then
            echo "  [DRY RUN] $file → $remote_path"
        else
            echo "  Syncing: $file → $remote_path"
            
            # Create remote directory if needed
            remote_dir=$(dirname "$remote_path")
            ssh $SSH_OPTS -p "$SSH_PORT" -i "$SSH_KEY" "root@$SSH_HOST" \
                "mkdir -p '$remote_dir'" || {
                echo "    Failed to create remote directory: $remote_dir"
                continue
            }
            
            # Copy the file
            scp $SSH_OPTS -P "$SSH_PORT" -i "$SSH_KEY" \
                "$file" "root@$SSH_HOST:$remote_path" || {
                echo "    Failed to sync: $file"
                continue
            }
            
            echo "    ✓ Success"
        fi
    done
    
    if [[ "$DRY_RUN" == true ]]; then
        echo ""
        echo "Dry run complete. Use without --dry-run to actually sync files."
    else
        echo ""
        echo "Sync complete!"
    fi
}

#######################################
# Main command dispatcher
#######################################

# Get the command (default to sync for backwards compatibility)
COMMAND="${1:-sync}"

# Handle help early
if [[ "$COMMAND" == "help" || "$COMMAND" == "--help" || "$COMMAND" == "-h" ]]; then
    print_help
    exit 0
fi

# Shift to remove command from arguments
if [[ $# -gt 0 ]]; then
    shift
fi

# Dispatch to subcommand
case "$COMMAND" in
    sync)
        cmd_sync "$@"
        ;;
    status)
        cmd_status
        ;;
    set-pod)
        cmd_set_pod "$@"
        ;;
    set-remote-path)
        cmd_set_remote_path "$@"
        ;;
    add)
        cmd_add "$@"
        ;;
    remove)
        cmd_remove "$@"
        ;;
    *)
        echo "Unknown command: $COMMAND"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac